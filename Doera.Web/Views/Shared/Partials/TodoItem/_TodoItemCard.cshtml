@using Doera.Application.DTOs.TodoItem
@using Doera.Core.Enums
@model TodoItemDto
@{
    var overdue = Model.DueDate.HasValue && Model.DueDate.Value < DateTimeOffset.UtcNow && Model.ArchivedAt != null;
    var borderClass = Model.Status switch {
        TodoStatus.Completed => "border-success",
        TodoStatus.InProgress => "border-primary",
        TodoStatus.ToDo => "border-warning",
        _ => overdue ? "border-danger" : ""
    };
    if (overdue && Model.Status != TodoStatus.Completed) {
        borderClass = "border-danger";
    }
}
<div class="col">
    <div class="card h-100 shadow-sm @borderClass position-relative border border-1" style="cursor: pointer;"
         onclick="window.location.href='@Url.Action("Edit", "TodoItem", new { id = Model.Id })'">
        <div class="card-body p-3">
            <!-- Header: Title + Delete Action -->
            <div class="d-flex justify-content-between align-items-start mb-2">
                <a asp-controller="TodoItem" asp-action="Edit" asp-route-id="@Model.Id"
                   class="h5 mb-0 pb-0 text-decoration-none text-dark flex-grow-1"
                   onclick="event.stopPropagation();">
                    @Model.Title
                </a>
                <form asp-controller="TodoItem" asp-action="Delete" asp-route-listId="@Model.TodoListId" asp-route-itemId="@Model.Id" method="post"
                      class="d-inline" onclick="event.stopPropagation();"
                      onsubmit="return confirm('Are you sure you want to delete this todo item?');">
                    @Html.AntiForgeryToken()
                    <button type="submit" class="btn btn-sm btn-outline-danger">Delete</button>
                </form>
            </div>

            <!-- Description -->
            @if (!string.IsNullOrWhiteSpace(Model.Description)) {
                <p class="card-text text-muted mb-2 small">@Model.Description</p>
            }

            <!-- Metadata List -->
            <div class="small">
                @if (Model.Status != TodoStatus.None) {
                    <div class="mb-1">
                        <strong class="text-muted">Status:</strong>
                        <span class="@(Model.Status switch {
                                  TodoStatus.Completed => "text-success",
                                  TodoStatus.InProgress => "text-primary",
                                  TodoStatus.ToDo => "text-warning",
                                  _ => ""
                              })">@Model.Status</span>
                </div>
                                }
                @if (Model.Priority != TodoPriority.None) {
                    <div class="mb-1">
                        <strong class="text-muted">Priority:</strong>
                        <span class="@(Model.Priority switch {
                                  TodoPriority.Urgent => "text-danger fw-bold",
                                  TodoPriority.High => "text-danger",
                                  TodoPriority.Medium => "text-warning",
                                  TodoPriority.Low => "text-info",
                                  _ => ""
                              })">@Model.Priority</span>
                </div>
                                }
                @if (Model.StartDate is not null || Model.DueDate is not null) {
                    <div class="mb-1">
                        @if (Model.StartDate is not null) {
                            <strong class="text-muted">Start:</strong>
                            <span>@Model.StartDate.Value.ToString("dd MMM yyyy")</span>
                        }
                        @if (Model.StartDate is not null && Model.DueDate is not null) {
                            <span class="mx-2">•</span>
                        }
                        @if (Model.DueDate is not null) {
                            <strong class="text-muted">Due:</strong>
                            <span class="@(overdue ? "text-danger fw-bold" : "")">
                                @Model.DueDate.Value.ToString("dd MMM yyyy")
                                @if (overdue) {
                                    <span class="badge bg-danger ms-1 small">OVERDUE</span>
                                }
                            </span>
                        }
                    </div>
                }
                @if (Model.ArchivedAt is not null) {
                    <div class="mb-1">
                        <span class="badge bg-secondary">Archived</span>
                    </div>
                }
            </div>

            <!-- Tags (clearly separated at bottom) -->
            @if (Model.Tags?.Any() == true) {
                <div class="border-top pt-2 mt-2">
                    <div class="d-flex flex-wrap gap-1">
                        @foreach (var tag in Model.Tags) {
                            <span class="badge bg-light text-secondary border small">@tag.DisplayName</span>
                        }
                    </div>
                </div>
            }
        </div>
    </div>
</div>